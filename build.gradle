import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	ext {
        springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.owasp:dependency-check-gradle:+")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'war'

group project.group
version project.version

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

repositories {
	mavenCentral()
    // needed until spring cloud releases openfeign-starter 2.1.0
    maven {
        url 'https://maven.springframework.org/milestone'
    }
}

jacoco {
	toolVersion = '0.8.2'
}

check.dependsOn jacocoTestReport

dependencies {
    compileOnly('org.projectlombok:lombok')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.apache.velocity:velocity:1.7')
    implementation('org.springframework.cloud:spring-cloud-starter-openfeign:2.1.0.RC2')
    implementation('io.github.openfeign:feign-httpclient:9.5.1')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    runtime('mysql:mysql-connector-java')

    // TODO REMOVE ME AGAIN WHEN DONE DEVELOPING
    runtime('com.h2database:h2')

    // implementation('org.springframework.boot:spring-boot-starter-tomcat')
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('com.h2database:h2')
    testImplementation('org.powermock:powermock-core:2.0.0-RC.4')
    testImplementation('org.powermock:powermock-module-junit4:2.0.0-RC.4')
    testImplementation('org.powermock:powermock-api-mockito2:2.0.0-RC.4')
}

jar {
    manifest {
        attributes "Description": project.description,
                "Version": project.version
    }
}

war {
    baseName = project.name
    version = project.version
}

checkstyle {
    toolVersion = "8.5"
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

bootWar {
    // executable = true
    excludeDevtools = true
}

processResources {
    def sourceFiles = source.files
    from(sourceFiles) {
        include '**/*.yml'
        filter(ReplaceTokens, tokens: ['version': version])
    }
    from(sourceFiles) {
        exclude '**/*.yml'
    }
}

bootRun {
    doFirst {
        jvmArgs = ["-Dspring.profiles.active=dev"]
    }
}
